{
	"info": {
		"_postman_id": "39a42561-72cc-4fa6-b972-f497abddeeec",
		"name": "Introduction à Postman",
		"description": "# Introduction à Postman\r\n\r\n## Pourquoi Postman ?\r\n\r\nLes API font partie intégrante du travail de tout développeur web et une chose est sûre : elles sont de plus en plus nombreuses et de plus en plus complexes avec une multitude de façon de s'y authentifier (Oauth, clé API, token), de headers à gérer, de cookies, d'environnements (local, développement, intégration, recette, production), etc.\r\n\r\nAvant de commencer le développement et de coder un quelconque connecteur à une API tierce pour une nouvelle fonctionnalité dans votre application, il peut être très avantageux de s'assurer du bon fonctionnement de la-dite API.\r\nDans une optique similaire, pour notre propre API cette fois-ci, on peut imaginer un processus de conception & développement dans lequel l'ensemble des requêtes nécessaires à la création d'une nouvelle fonctionnalité soit créées en amont du développement avec des tests afin de valider les signatures et la sécurité des endpoints.\r\n\r\nPlusieurs solutions sont disponibles : [Insomnia](https://insomnia.rest/), [l'extension VSCode \"REST Client\"](https://marketplace.visualstudio.com/items?itemName=humao.rest-client), [Paw](https://paw.cloud/)...\r\nL'une des applications les plus populaires, et celle sur laquelle nous allons nous pencher est [Postman](https://www.postman.com/downloads/).\r\nElle permet de créer des requêtes très rapidement, de gérer et maintenir des collections en équipe et de créer des cas de test et scénarios.\r\n\r\nCette introduction prendra la forme de plusieurs chapitres constitués d'une page chacun et démontrant une notion ou un thème par l'exemple. Une collection et un environnement sont également téléchargeables et importables dans Postman afin que les explications puissent être suivies directement sur l'application de bureau.\r\n\r\nL'API sur laquelle se basera cette introduction est l'API conseillée par Postman pour tester l'outil et sa documentation se trouve ici : https://postman-echo.com\r\n\r\n## Pré-requis\r\n\r\n- Avoir téléchargé [Postman](https://www.postman.com/downloads/)\r\n- Notions basiques de Javascript pour l'écriture des tests\r\n- Notions basiques du protocole HTTP\r\n- Notions basiques des APIs RESTful et du cotenu JSON",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Chapitre 1 - Première requête",
			"item": [
				{
					"name": "Première requête",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://postman-echo.com/get?entity=users&sort=username",
							"protocol": "https",
							"host": [
								"postman-echo",
								"com"
							],
							"path": [
								"get"
							],
							"query": [
								{
									"key": "entity",
									"value": "users"
								},
								{
									"key": "sort",
									"value": "username"
								},
								{
									"key": "page",
									"value": "1",
									"disabled": true
								}
							]
						},
						"description": "[Lire le chapitre 1 sur github](https://github.com/JNBourrat/postman-intro/blob/master/chapitres/01-requetes_et_collection.md)"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Chapitre 2 - Variables et environnement",
			"item": [
				{
					"name": "1 - Requête avec une url \"variabilisée\"",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/get?entity=users&sort=username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"get"
							],
							"query": [
								{
									"key": "entity",
									"value": "users"
								},
								{
									"key": "sort",
									"value": "username"
								},
								{
									"key": "page",
									"value": "1",
									"disabled": true
								}
							]
						},
						"description": "[Lire le chapitre 2 sur github](https://github.com/JNBourrat/postman-intro/blob/master/chapitres/02-variables_et_environnement.md)"
					},
					"response": []
				},
				{
					"name": "2 - Scope de la variable \"userName\"",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"companyName\": \"Apside\",\n\t\"userName\": \"{{userName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/post",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"post"
							]
						},
						"description": "Pour tester :\r\n- Décocher la variable d'environnement `userName` de l'environnement `[Env A] Postman Echo`\r\n- Déclarer une variable \"globale\" grâce à l'outil de gestion rapide des environnements en cliquant sur le symbôle de l'oeil en haut à droite de la fenêtre puis sur le bouton `Edit` en face de la section `Globals`\r\n- Affecter la valeur \"Dupont\" à une variable globale `userName`  puis enregistrer\r\n- Envoyer la requête, vérifier la valeur envoyée grâce au body de la réponse\r\n- Cocher la variable d'environnement `userName`\r\n- Envoyer la requête, vérifier la valeur envoyée grâce au body de la réponse"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "272a57bb-cf7c-4dca-8b7a-9aaee9605f2a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "94f9a54f-18ac-4791-aad7-a6edde49ae18",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Chapitre 3 - Scripts et tests (basique)",
			"item": [
				{
					"name": "4 - Mutualisation des scripts",
					"item": [
						{
							"name": "1 - Requête avec des scripts vides",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c728e1fe-fcb4-45e6-80fb-997ba9aa5908",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"folder\": \"{{folderName}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/put",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"put"
									]
								}
							},
							"response": []
						},
						{
							"name": "2 - Requête avec des tests supplémentaires",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e4fd2d5-15ce-49a2-815b-cd80e800c5a0",
										"exec": [
											"const folderName = pm.variables.get('folderName'); // Récupère la valeur de la variable 'folderName' dans le scope le plus restreint (ici environment)\r",
											"\r",
											"const parsedBody = pm.response.json(); // Récupère le body de la réponse au format JSON\r",
											"\r",
											"pm.test(`Response should have the correct folder name: \"${folderName}\"`, function () {\r",
											"    pm.expect(parsedBody.data.folder).to.eql(folderName);\r",
											"});\r",
											"\r",
											"pm.environment.unset('folderName'); // Supprime la variable d'environnement 'folderName' car c'est le dernier test à l'utiliser"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "87eebcd9-ff5b-4f5a-9ddc-d62a1b10b3ca",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"folder\": \"{{folderName}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/put",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"put"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d3db8117-8460-49e2-b640-7ee0bf438471",
								"type": "text/javascript",
								"exec": [
									"const folderName = '4 - Mutualisation des scripts';",
									"",
									"pm.environment.set('folderName', folderName);",
									"",
									"console.log(`Nous avons initialisé la variable 'folderName' dans le script de pré-requête du dossier \"${folderName}\"`);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d2c4d653-0508-4329-af34-19e22c242b61",
								"type": "text/javascript",
								"exec": [
									"const folderName = pm.variables.get('folderName');",
									"",
									"pm.test(`Response status should be 200`, () => {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "1 - Script de pré-requête",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cfac0e3b-59fb-4b71-9a67-a6527aec5e39",
								"exec": [
									"pm.variables.set('statusCodeToReceive', 201);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "49f972ab-b69c-4bb5-a3e4-94ce49a9289b",
								"exec": [
									"pm.variables.unset('statusCodeToReceive');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/status/{{statusCodeToReceive}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status",
								"{{statusCodeToReceive}}"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								}
							]
						},
						"description": "[Lire le chapitre 3 complet sur github](https://github.com/JNBourrat/postman-intro/blob/master/chapitres/03-basics-scripts_et_tests.md)"
					},
					"response": []
				},
				{
					"name": "2 - Script de test",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c6b775f0-499e-4d20-a2e7-9d593a467f4e",
								"exec": [
									"pm.environment.set('statusCodeToReceive', 401);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ca421770-096f-4c2f-b1f2-665d2f8b93be",
								"exec": [
									"pm.test(\"Status should be '401'\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Expected failing test\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(402);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/status/{{statusCodeToReceive}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status",
								"{{statusCodeToReceive}}"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "3 - Utiliser une variable dans un script",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1b0af22b-e802-4c34-8c01-54458c5115c0",
								"exec": [
									"pm.variables.set('statusCodeToReceive', 504);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "643445de-3070-4141-bc17-88f82fde524e",
								"exec": [
									"const statusCodeToReceive = pm.variables.get('statusCodeToReceive');\r",
									"\r",
									"pm.test(`Status should be ${statusCodeToReceive}`, function () {\r",
									"    pm.response.to.have.status(statusCodeToReceive);\r",
									"});\r",
									"\r",
									"console.log('========= Chapitre 3, exemple 3 ==========')\r",
									"console.log(pm.response);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/status/{{statusCodeToReceive}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status",
								"{{statusCodeToReceive}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Chapitre 4 - Scripts et tests (intermédiaire)",
			"item": [
				{
					"name": "1 - Validation par \"pm.expect\"",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5b011c90-c2ba-407a-baa7-a892a44bc432",
								"exec": [
									"pm.variables.set('companyName', 'Nom de ma société');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "76d2acbc-5a0a-48d7-9233-a9393b20ef83",
								"exec": [
									"const companyName = pm.variables.get('companyName');\r",
									"const userName = pm.variables.get('userName');\r",
									"const baseUrl = pm.variables.get('baseUrl');\r",
									"\r",
									"const parsedBody = pm.response.json();\r",
									"\r",
									"// Teste le type et la valeur de l'attribut 'url' de la réponse\r",
									"pm.test(`Response should contain a url 'string' attribute: \"${baseUrl}/post\"`, function () {\r",
									"    pm.expect(parsedBody.url).to.be.a('string').that.is.eql(`${baseUrl}/post`);\r",
									"});\r",
									"\r",
									"pm.test(`Response should contain a data 'object' attribute`, function () {\r",
									"    pm.expect(parsedBody.data).to.be.an('object').that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(`Response data should have a companyName attribute: \"${companyName}\"`, function () {\r",
									"    pm.expect(parsedBody.data.companyName).to.eql(companyName);\r",
									"});\r",
									"\r",
									"pm.test(`Response data should have a non-empty 'employees' attribute of type 'array'`, function () {\r",
									"    pm.expect(parsedBody.data.employees).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(`Response data employees should all be of type object, have a lastName and a position attributes that are string and if annualIncome is present, it should be a number over 18,473 €`, function () {\r",
									"    const employees = parsedBody.data.employees;\r",
									"    console.log('Employees list: \\n', employees);\r",
									"\r",
									"    for (employee of employees) {\r",
									"        pm.expect(employee).to.be.an('object');\r",
									"        pm.expect(employee).to.have.property('lastName')\r",
									"        pm.expect(employee).to.have.property('position');\r",
									"        pm.expect(employee.lastName).to.be.a('string');\r",
									"        pm.expect(employee.position).to.be.a('string');\r",
									"        if (employee.annualIncome) {\r",
									"            pm.expect(employee.annualIncome).to.be.a('number').above(18473);\r",
									"        }\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"companyName\": \"{{companyName}}\",\n\t\"employees\": [\n\t\t{\n\t\t\t\"lastName\": \"{{userName}}\",\n\t\t\t\"position\": \"Web developer\",\n\t\t\t\"annualIncome\": 27000\n\t\t},\n\t\t{\n\t\t\t\"lastName\": \"Dupont\",\n\t\t\t\"position\": \"CTO\",\n\t\t\t\"annualIncome\": 50000\n\t\t},\n\t\t{\n\t\t\t\"lastName\": \"Martin\",\n\t\t\t\"position\": \"Janitor\",\n\t\t\t\"annualIncome\": 19000\n\t\t},\n\t\t{\n\t\t\t\"lastName\": \"Morand\",\n\t\t\t\"position\": \"Scrum master\"\n\t\t}\n\t]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/post",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "2 - Validation par JSON Schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc8758b4-0ef7-4da0-858e-53e23463bd59",
								"exec": [
									"const baseUrl = pm.variables.get('baseUrl');\r",
									"\r",
									"const postCompanySchema = {\r",
									"  \"title\": \"Post Company with Employees Schema\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"args\": {\r",
									"      \"type\": \"object\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"companyName\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"employees\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"              \"lastName\": {\r",
									"                \"type\": \"string\"\r",
									"              },\r",
									"              \"position\": {\r",
									"                \"type\": \"string\"\r",
									"              },\r",
									"              \"annualIncome\": {\r",
									"                \"type\": \"number\",\r",
									"                \"minimum\": 18473\r",
									"              }\r",
									"            },\r",
									"            \"additionalProperties\": false,\r",
									"            \"required\": [\r",
									"              \"lastName\",\r",
									"              \"position\"\r",
									"            ]\r",
									"          }\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"companyName\",\r",
									"        \"employees\"\r",
									"      ],\r",
									"    },\r",
									"    \"files\": {\r",
									"      \"type\": \"object\"\r",
									"    },\r",
									"    \"form\": {\r",
									"      \"type\": \"object\"\r",
									"    },\r",
									"    \"headers\": {\r",
									"      \"type\": \"object\"\r",
									"    },\r",
									"    \"url\": {\r",
									"      \"type\": \"string\",\r",
									"      \"enum\": [`${baseUrl}/post`]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"data\",\r",
									"    \"headers\",\r",
									"    \"url\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test(`Response body should be validated by schema '${postCompanySchema.title}'`, function () {\r",
									"    pm.response.to.have.jsonSchema(postCompanySchema);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "578846d1-e179-4f2d-8e98-b3414a58a59c",
								"exec": [
									"pm.variables.set('companyName', 'Nom de ma société');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"companyName\": \"{{companyName}}\",\n\t\"employees\": [\n\t\t{\n\t\t\t\"lastName\": \"{{userName}}\",\n\t\t\t\"position\": \"Web developer\",\n\t\t\t\"annualIncome\": 27000\n\t\t},\n\t\t{\n\t\t\t\"lastName\": \"Dupont\",\n\t\t\t\"position\": \"CTO\",\n\t\t\t\"annualIncome\": 50000\n\t\t},\n\t\t{\n\t\t\t\"lastName\": \"Martin\",\n\t\t\t\"position\": \"Janitor\",\n\t\t\t\"annualIncome\": 19000\n\t\t},\n\t\t{\n\t\t\t\"lastName\": \"Morand\",\n\t\t\t\"position\": \"Scrum master\"\n\t\t}\n\t]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/post",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "3 - Réutilisation de JSON Schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4154131d-abcb-49b8-a657-649837416a7f",
								"exec": [
									"const postCompanySchema =  JSON.parse(pm.environment.get('postCompanySchema')); // il faut parser le contenu de la variable car on ne peut pas stocker de valeur autrement qu'en string\r",
									"\r",
									"pm.test(`Response body should be validated by schema '${postCompanySchema.title}'`, function () {\r",
									"    pm.response.to.have.jsonSchema(postCompanySchema);\r",
									"});\r",
									"\r",
									"// Bonne pratique : toujours supprimer une variable d'environnement après sa dernière utilisation\r",
									"// Pour voir appraître le schéma en variable d'environnement, il suffit de commenter cette ligne, de relancer la requête et de cliquer sur l'oeil en haut à droite de la fenêtre, à côté du sélecteur d'environnement\r",
									"pm.environment.unset('postCompanySchema');\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "2f1d5799-49bb-4335-87a2-49a12c18fa6d",
								"exec": [
									"pm.variables.set('companyName', 'Nom de ma société');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"companyName\": \"{{companyName}}\",\n\t\"employees\": [\n\t\t{\n\t\t\t\"lastName\": \"{{userName}}\",\n\t\t\t\"position\": \"Web developer\",\n\t\t\t\"annualIncome\": 27000\n\t\t},\n\t\t{\n\t\t\t\"lastName\": \"Dupont\",\n\t\t\t\"position\": \"CTO\",\n\t\t\t\"annualIncome\": 50000\n\t\t},\n\t\t{\n\t\t\t\"lastName\": \"Martin\",\n\t\t\t\"position\": \"Janitor\",\n\t\t\t\"annualIncome\": 19000\n\t\t},\n\t\t{\n\t\t\t\"lastName\": \"Morand\",\n\t\t\t\"position\": \"Scrum master\"\n\t\t}\n\t]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/post",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"post"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5f5a40e7-3a91-4a4e-89a1-fc588e8e3138",
						"type": "text/javascript",
						"exec": [
							"const baseUrl = pm.variables.get('baseUrl');",
							"",
							"const postCompanySchema = {",
							"  \"title\": \"Post Company with Employees Schema\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"args\": {",
							"      \"type\": \"object\"",
							"    },",
							"    \"data\": {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"companyName\": {",
							"          \"type\": \"string\"",
							"        },",
							"        \"employees\": {",
							"          \"type\": \"array\",",
							"          \"items\": {",
							"            \"type\": \"object\",",
							"            \"properties\": {",
							"              \"lastName\": {",
							"                \"type\": \"string\"",
							"              },",
							"              \"position\": {",
							"                \"type\": \"string\"",
							"              },",
							"              \"annualIncome\": {",
							"                \"type\": \"number\",",
							"                \"minimum\": 18473",
							"              }",
							"            },",
							"            \"additionalProperties\": false,",
							"            \"required\": [",
							"              \"lastName\",",
							"              \"position\"",
							"            ]",
							"          }",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"companyName\",",
							"        \"employees\"",
							"      ],",
							"    },",
							"    \"files\": {",
							"      \"type\": \"object\"",
							"    },",
							"    \"form\": {",
							"      \"type\": \"object\"",
							"    },",
							"    \"headers\": {",
							"      \"type\": \"object\"",
							"    },",
							"    \"url\": {",
							"      \"type\": \"string\",",
							"      \"enum\": [`${baseUrl}/post`]",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"data\",",
							"    \"headers\",",
							"    \"url\"",
							"  ]",
							"};",
							"",
							"pm.environment.set('postCompanySchema', JSON.stringify(postCompanySchema));"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e3a33808-75c9-4c39-b030-ea3a7d8a0497",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Chapitre 5 - Scripts et tests (avancé)",
			"item": [
				{
					"name": "1 - Réutilisation de code Javascript",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3a0d96af-7947-4d79-a1e8-2fbf6ba0c860",
								"exec": [
									"const requestedStatus = pm.variables.get('requestedStatus');\r",
									"const maxResponseTime = 200;\r",
									"const statusSchema = {\r",
									"    \"title\": `GET Status Schema for status ${requestedStatus}`,\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"status\": {\r",
									"            \"type\": \"number\",\r",
									"            \"minimum\": requestedStatus,\r",
									"            \"maximum\": requestedStatus,\r",
									"        }\r",
									"    },\r",
									"    \"additionalProperties\": false,\r",
									"    \"required\": [\r",
									"        \"status\"\r",
									"    ]\r",
									"}\r",
									"\r",
									"pm.test(`Status should be '${requestedStatus}'`, function () {\r",
									"    pm.response.to.have.status(requestedStatus);\r",
									"});\r",
									"\r",
									"pm.test(`Response body should validate JSON Schema '${statusSchema.title}'`, function () {\r",
									"    pm.response.to.have.jsonSchema(statusSchema);\r",
									"});\r",
									"\r",
									"pm.test(`Response time is less than ${maxResponseTime}ms`, function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(maxResponseTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "caa1274a-3523-4d90-9357-e67555d67b26",
								"exec": [
									"pm.variables.set('requestedStatus', 501);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/status/{{requestedStatus}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status",
								"{{requestedStatus}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2 - DRY (code 201)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "12fcb565-e63a-464c-a790-cb7732d347be",
								"exec": [
									"const requestedStatus = pm.variables.get('requestedStatus');\r",
									"\r",
									"eval(globals.testGetStatusResponse)(requestedStatus);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "6d2ba9b9-fe0b-4f32-a70c-1a562d06329a",
								"exec": [
									"pm.variables.set('requestedStatus', 201);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/status/{{requestedStatus}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status",
								"{{requestedStatus}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3 - DRY (code 301)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5c2bd3e2-9eb5-48cc-bb3d-2ba11988e590",
								"exec": [
									"const requestedStatus = pm.variables.get('requestedStatus');\r",
									"\r",
									"eval(globals.testGetStatusResponse)(requestedStatus);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cadd8494-3d7e-4bbc-a386-7db6cc504ccd",
								"exec": [
									"pm.variables.set('requestedStatus', 301);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/status/{{requestedStatus}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status",
								"{{requestedStatus}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "4 - DRY (code 401)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "75d81dc2-3f99-4f60-8621-048ca1760e91",
								"exec": [
									"const requestedStatus = pm.variables.get('requestedStatus');\r",
									"\r",
									"eval(globals.testGetStatusResponse)(requestedStatus);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "51e5a546-8507-4517-9170-61e762a592fc",
								"exec": [
									"pm.variables.set('requestedStatus', 401);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/status/{{requestedStatus}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status",
								"{{requestedStatus}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "5 - DRY (code 501)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ad02526b-8176-4a1d-9687-ba4ff48c4d36",
								"exec": [
									"const requestedStatus = pm.variables.get('requestedStatus');\r",
									"\r",
									"eval(globals.testGetStatusResponse)(requestedStatus);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b9886681-9788-409d-94d1-7a3173e6728d",
								"exec": [
									"pm.variables.set('requestedStatus', 501);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/status/{{requestedStatus}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status",
								"{{requestedStatus}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "6 - DRY (code 510)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "70ec30a2-8866-4b78-9dd2-63850e27c520",
								"exec": [
									"pm.variables.set('requestedStatus', 510);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "06694441-9e78-41e1-8a0d-22834a3a4776",
								"exec": [
									"const requestedStatus = pm.variables.get('requestedStatus');\r",
									"\r",
									"eval(globals.testGetStatusResponse)(requestedStatus, 500);\r",
									"\r",
									"pm.globals.unset('testGetStatusResponse');\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/status/{{requestedStatus}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status",
								"{{requestedStatus}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "acafc26d-cb52-4505-a860-d520d06f316f",
						"type": "text/javascript",
						"exec": [
							"const responseStatus = {",
							"  \"title\": \"Response with status number\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"status\": {",
							"      \"type\": \"number\"",
							"    }",
							"  }",
							"};",
							"",
							"pm.environment.set('postCompanySchema', JSON.stringify(responseStatus));"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0b7e2d16-2bdf-4fdf-ae81-d5e616d65807",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Chapitre 6 - Runner (basique)",
			"item": [
				{
					"name": "1 - Antépénultième requête du runner",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ecb98c60-e7ca-4a1f-849c-1fad2c0d779b",
								"exec": [
									"const requestedStatus = pm.variables.get('requestedStatus');\r",
									"\r",
									"eval(globals.testGetStatusResponse)(requestedStatus, 500);\r",
									"\r",
									"pm.globals.unset('testGetStatusResponse');\r",
									"\r",
									"console.log('Log depuis la requête 1 du chapitre 6 ==> Antépénultième requête en mode automatique', \"Calling postman.setNextRequest('3 - Avant-dernière requête du runner')\");\r",
									"postman.setNextRequest('3 - Avant-dernière requête du runner');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "93a1f4d6-7709-48a2-b3e9-013b2cf4f83b",
								"exec": [
									"pm.variables.set('requestedStatus', 505);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/status/{{requestedStatus}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status",
								"{{requestedStatus}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "2 - Dernière requête du runner",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bdc8a638-7af8-4013-8011-f53797a369eb",
								"exec": [
									"const requestedStatus = pm.variables.get('requestedStatus');\r",
									"eval(globals.testGetStatusResponse)(requestedStatus, 500);\r",
									"pm.globals.unset('testGetStatusResponse');\r",
									"\r",
									"console.log('Log depuis la requête 2 du chapitre 6 ==> Dernière requête du runner', \"Calling postman.setNextRequest(null)\");\r",
									"postman.setNextRequest(null);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e178cf03-6d80-4e2f-93cc-c2be023f46bf",
								"exec": [
									"pm.variables.set('requestedStatus', 506);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/status/{{requestedStatus}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status",
								"{{requestedStatus}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "3 - Avant-dernière requête du runner",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "480c8338-245c-485a-8158-cdab7f668ebb",
								"exec": [
									"const requestedStatus = pm.variables.get('requestedStatus');\r",
									"\r",
									"eval(globals.testGetStatusResponse)(requestedStatus, 500);\r",
									"\r",
									"pm.globals.unset('testGetStatusResponse');\r",
									"\r",
									"console.log('Log depuis la requête 3 du chapitre 6  ==> Avant-dernière requête en mode automatique', \"Calling postman.setNextRequest('2 - Dernière requête du runner')\");\r",
									"postman.setNextRequest('2 - Dernière requête du runner');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e35e36d2-d899-49c4-9f2e-1348caccc1aa",
								"exec": [
									"pm.variables.set('requestedStatus', 507);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/status/{{requestedStatus}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"status",
								"{{requestedStatus}}"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "d88fd85c-d60f-40ab-86ad-0aed4fb0812a",
				"type": "text/javascript",
				"exec": [
					"postman.setGlobalVariable(\"testGetStatusResponse\", (requestedStatus, maxResponseTime = 200) => {",
					"    const statusSchema = {",
					"        \"title\": `GET Status Schema for status ${requestedStatus}`,",
					"        \"type\": \"object\",",
					"        \"properties\": {",
					"            \"status\": {",
					"                \"type\": \"number\",",
					"                \"minimum\": requestedStatus,",
					"                \"maximum\": requestedStatus,",
					"            }",
					"        },",
					"        \"additionalProperties\": false,",
					"        \"required\": [",
					"            \"status\"",
					"        ]",
					"    }",
					"",
					"    pm.test(`Response status should be '${requestedStatus}'`, function () {",
					"        pm.response.to.have.status(requestedStatus);",
					"    });",
					"",
					"    pm.test(`Response body should validate JSON Schema '${statusSchema.title}'`, function () {",
					"        pm.response.to.have.jsonSchema(statusSchema);",
					"    });",
					"",
					"    pm.test(`Response time is less than ${maxResponseTime}ms`, function () {",
					"        pm.expect(pm.response.responseTime).to.be.below(maxResponseTime);",
					"    });",
					"});",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "91662930-14a2-46c8-9736-0712b4328a63",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}